#!/usr/bin/env ruby

# Script for dumping keys from an unencrypted bitcoinj protobuf wallet
# (e.g. from the Schildbach Bitcoin wallet for Android).

# https://github.com/bitcoin-wallet/bitcoin-wallet/blob/master/wallet/README.recover.md#recovering-from-protobuf-wallet-format
# https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/proto/wallet.proto
# https://developers.google.com/protocol-buffers/docs/encoding#simple

module ProtobufReader
  WireTypes = [:varint, :bit64, :length_delimited,
    :start_group, :end_group, :'32bit', :type6, :type7]
  def read_varint
    value = 0
    while true
      b = read(1).ord
      value = (value << 7) | (b & 0x7F)
      break if b[7] == 0
    end
    value
  end

  def read_key
    packed_key = read_varint
    field_number = packed_key >> 3
    wire_type = WireTypes[packed_key & 7]
    [field_number, wire_type]
  end

  def read_pair
    field_number, wire_type = read_key
    if wire_type == :length_delimited
      length = read_varint
      value = read(length)
    else
      raise NotImplementedError, "Wire type #{wire_type}"
    end
    [field_number, value]
  end
end

def wallet_dump(stream)
  stream.extend ProtobufReader
  p stream.read_pair
end

if ARGV.empty?
  puts "Usage: protobuf-wallet-dump DECRYPTED_FILENAME"
  exit 1
end

wallet_dump(File.open(ARGV[0], 'rb'))
